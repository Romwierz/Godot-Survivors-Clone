nodes:

scenes: 

--> Inherit (np. w ustawieniu parametru Texture) sprawia, że brane są ustawienia z Project Settings.

--> Trzymanie Alt pozwala na przemieszczanie zaznaczonego Node.

--> Camera2D - określa gdzie jest Viewport.


--> Uzyskiwanie dostępu do Node (referencing):

	a) $NodeName
	b) @onready var name = $NodeName lub get_node("NodeName")
	c) get_tree().get_first_node_in_group("group_name")
	!!! % Access as Unique Name - jest to przydatne, ponieważ do Node domyślnie uzyskiwany jest dostęp za pomocą ścieżki 	              (umiejscowienia w projekcie), więc jej zmiana może doprowadzić do błędów. Ta opcja temu przeciwdziała.
	https://www.reddit.com/r/godot/comments/115b00l/tip_1_use_unique_name_identifier/


--> Jeden ze sposobów na animacje: 
	- utworzenie AnimationPlayer
	- w Sprite2D utworzenie Tracków na podstawie poszczególnych klatek animacji


--> HurtBox: obiekt dostaje obrażenia
--> HitBox: obiekt dotyka czegoś

--> Zmiana nazw warstw wchodzących ze sobą w kolizje: Project Settings -> General -> Layer Names -> 2D Physics

--> Editable Children po kliknięciu PPM na Node pozwala na edycje parametrów Nodes zdefiniowanych w innej Scene

--> Debug -> Visible Collision Shapes pozwala na wyświetlanie collision shapes i obserawcję, czy wchodzą ze sobą w interakcje

--> Signal pozwala na wywołanie funkcji w skrypcie Node'a, który tego sugnału nie wyemitował.

--> "Signal Up, Call Down": dobrym zwyczajem jest, aby funkcja w skrypcie rodzica była wywoływana przez sygnał wyemitowany przez dziecko, a nie żeby funkcja ze skryptu rodzica była wywoływana przez skrypt dziecka
	- rodzice mogą nie mieć odpowiedniej funkcji (metody)
	- większa kontrola nad działaniem
	- teoretycznie czystszy i łatwiejszy w obsłudze/kontroli kod

--> Layers vs. Masks:
	- Layer: "I exist on the following Layer(s)"
	- Mask: "I will collide with items that exist on the following layer(s)"

--> match == switch

PART 5

--> Classes pozwalają na zmniejszenie kodu/niepisanie tego samego w wielu miejscach
--> taką klasę można zapisać jako @export, dzięki czemu parametry instacji tej klasy można edytować w polu Inspector

PART 6

--> CanvasItem -> Visibilty -> Top Level: On: sprawia, że pociski wychodzą z gracza

--> Tweens - pozwalają na dynamiczną modyfikację parametrów (properties) Node'a widocznych w polu Inspector, np. zmiana rozmiaru pocisku; wykorzystanie
	1) create_tween() do zmiennej (.set_parallel() pozwala na równoległą modyfikację atrybutów)
	2) zmienna.tween_property() - dostanie się do odpowiedniego atrybutu
	3) zmienna.play()
	4) zmienna.tween_callback(...) pozwala na wywołanie jakiejś funkcji po zakończeniu tweena
	5) set_trans() i set_ease() określają w jaki sposób dochodzi do przejścia pomiędzy różnymi wartościami atrybutu

PART 8

!!! ctrl + R pozwala na zamianę znakó/tekstu w zaznaczonym miejscu

--> #region nazwa
    #endregion

--> zmienna last_mov -> ostatni uchwycony wektor ruchu postaci
--> żeby uzyskać wektor ruchu pocisku tornada, do jego global_position dodany jest wektor last_mov, a jego odpowiednia współrzędna (lub obie, w zależności od wektora ruchu postaci) jest mnożona przez losową wartość (na przemian dodatnia i ujemna, dzięki czemu wektor ruchu pocisku oscyluje wokół wektora ruchu postaci --- tutaj nie rozumiem, czemu ta wartość jest jeszcze przemnożona przez np. 500)

--> position vs global_position:
	Local co-ordinates are relative to the parent that the node is a child of. Global co-ordinates are an exact position on the 	screen (including off-screen space).

	For example if you have a Node2D positioned at x:50, y:100 in the main scene. If you add a child node (say a Sprite), that 	Sprite will have a local position of 0,0 but a global position of 50, 100. Let’s imagine you want to move the Sprite 10 	pixels to the right. You set it’s position to 10,0 which is relative to it’s parent. Now it has global co-ordinates of 60, 	100 and local co-ordinates of 10, 0.

PART 10

-->  call_deffered() calls a function in the main thread when it is not doing anything / idle. There is no specific delay length, it 	just runs when there is nothing on the main thread.

--> GrabArea - przypisuje cel do gemu
--> CollectArea - wywołuje funkcję collect()









